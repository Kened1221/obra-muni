// Este es tu archivo de esquema de Prisma
// Aprende más en: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuarios
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String
  user          String    @unique
  password      String

  sessions        Session[]
  notifications   NotificationUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo de Sesiones
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo de Coordenadas (Obras)
model Coordinates {
  id             String   @id @default(cuid())
  state          String
  propietario_id String?
  resident       String?
  supervisor     String?
  projectType    String
  obraType       String
  cui            String
  name           String
  areaOrLength   String
  points         String
  fechaFinal     DateTime


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// Modelo de Imágenes
model Image {
  id             String   @id @default(cuid())
  url            String
  latitud        String?
  longitud       String?
  propietario_id String
  cui            String
  date           DateTime

  coordinatesId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo de Notificaciones
model Notification {
  id          String @id @default(cuid())
  title       String
  description String
  status      String
  priority    String

  notificationUsers NotificationUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Relación Muchos a Muchos: Usuario - Notificaciones
model NotificationUser {
  userId         String
  notificationId String

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@id([userId, notificationId])
}
